/*
 * This source file was generated by the Gradle 'init' task
 */
package hr.kbratko.eval.gradle

import hr.kbratko.eval.gradle.model.EvalBuilder
import org.gradle.api.Project
import org.gradle.api.provider.Provider
import org.gradle.tooling.provider.model.ToolingModelBuilderRegistry
import org.jetbrains.kotlin.gradle.plugin.KotlinCompilation
import org.jetbrains.kotlin.gradle.plugin.KotlinCompilerPluginSupportPlugin
import org.jetbrains.kotlin.gradle.plugin.SubpluginArtifact
import org.jetbrains.kotlin.gradle.plugin.SubpluginOption
import javax.inject.Inject

private val DEFAULT_PREFIXES = listOf("eval")

class EvalGradleSubplugin @Inject internal constructor(
    private val registry: ToolingModelBuilderRegistry
) : KotlinCompilerPluginSupportPlugin {
    override fun apply(target: Project) {
        target.createEvalExtension {
            prefixes.convention(DEFAULT_PREFIXES)
        }
        registry.register(EvalBuilder)
    }

    override fun isApplicable(kotlinCompilation: KotlinCompilation<*>): Boolean = true

    override fun applyToCompilation(kotlinCompilation: KotlinCompilation<*>): Provider<List<SubpluginOption>> {
        val project = kotlinCompilation.target.project

        val evalExtension = project.evalExtension

        return project.provider {
            val options = mutableListOf<SubpluginOption>()

            options += evalExtension.prefixes.get().map { PrefixOption(it) }

            options
        }
    }

    override fun getCompilerPluginId(): String = PLUGIN_ID

    override fun getPluginArtifact(): SubpluginArtifact =
        SubpluginArtifact(
            artifactId = ARTIFACT_ID,
            groupId = GROUP_ID,
            version = VERSION,
        )
}
